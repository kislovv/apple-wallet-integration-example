// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240312165730_Add_Push_Notification_Token")]
    partial class Add_Push_Notification_Token
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BL.Entities.AssociatedStoreApp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("PartnerSpecificId")
                        .HasColumnType("bigint")
                        .HasColumnName("partner_specific_id");

                    b.HasKey("Id")
                        .HasName("pk_associated_store_apps");

                    b.HasIndex("PartnerSpecificId")
                        .HasDatabaseName("ix_associated_store_apps_partner_specific_id");

                    b.ToTable("associated_store_apps", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Интенс APP",
                            PartnerSpecificId = 1L
                        });
                });

            modelBuilder.Entity("BL.Entities.Card", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ParticipantId")
                        .HasColumnType("bigint")
                        .HasColumnName("participant_id");

                    b.Property<long>("PartnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("partner_id");

                    b.Property<string>("PassId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pass_id");

                    b.Property<string>("UserHashId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_hash_id");

                    b.HasKey("Id")
                        .HasName("pk_cards");

                    b.HasIndex("ParticipantId")
                        .IsUnique()
                        .HasDatabaseName("ix_cards_participant_id");

                    b.HasIndex("PartnerId")
                        .HasDatabaseName("ix_cards_partner_id");

                    b.ToTable("cards", (string)null);
                });

            modelBuilder.Entity("BL.Entities.Device", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_devices");

                    b.ToTable("devices", (string)null);
                });

            modelBuilder.Entity("BL.Entities.Partner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("PartnerSpecificId")
                        .HasColumnType("bigint")
                        .HasColumnName("partner_specific_id");

                    b.HasKey("Id")
                        .HasName("pk_partners");

                    b.ToTable("partners", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Лукоил",
                            PartnerSpecificId = 0L
                        });
                });

            modelBuilder.Entity("BL.Entities.PartnerSpecific", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("background_color");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon_path");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logo_path");

                    b.Property<long>("PartnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("partner_id");

                    b.Property<string>("StripPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("strip_path");

                    b.HasKey("Id")
                        .HasName("pk_partner_specifics");

                    b.HasIndex("PartnerId")
                        .IsUnique()
                        .HasDatabaseName("ix_partner_specifics_partner_id");

                    b.ToTable("partner_specifics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BackgroundColor = "#5bd1e1",
                            Description = "Интенс APP",
                            IconPath = "Intens APP Icon 1x.png",
                            LogoPath = "Intens APP Icon 1x.png",
                            PartnerId = 1L,
                            StripPath = "Intens.png"
                        });
                });

            modelBuilder.Entity("BL.Entities.Pass", b =>
                {
                    b.Property<string>("PassId")
                        .HasColumnType("text")
                        .HasColumnName("pass_id");

                    b.Property<long>("CardId")
                        .HasColumnType("bigint")
                        .HasColumnName("card_id");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("PushToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("push_token");

                    b.HasKey("PassId")
                        .HasName("pk_passes");

                    b.HasIndex("CardId")
                        .IsUnique()
                        .HasDatabaseName("ix_passes_card_id");

                    b.ToTable("passes", (string)null);
                });

            modelBuilder.Entity("BL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.HasAlternateKey("Login")
                        .HasName("ak_users_login");

                    b.ToTable("users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DevicePass", b =>
                {
                    b.Property<string>("DevicesId")
                        .HasColumnType("text")
                        .HasColumnName("devices_id");

                    b.Property<string>("PassesPassId")
                        .HasColumnType("text")
                        .HasColumnName("passes_pass_id");

                    b.HasKey("DevicesId", "PassesPassId")
                        .HasName("pk_device_pass");

                    b.HasIndex("PassesPassId")
                        .HasDatabaseName("ix_device_pass_passes_pass_id");

                    b.ToTable("device_pass", (string)null);
                });

            modelBuilder.Entity("BL.Entities.Participant", b =>
                {
                    b.HasBaseType("BL.Entities.User");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(2)")
                        .HasDefaultValue(0.00m)
                        .HasColumnName("balance");

                    b.Property<long>("CardId")
                        .HasColumnType("bigint")
                        .HasColumnName("card_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.ToTable("participants", (string)null);
                });

            modelBuilder.Entity("BL.Entities.AssociatedStoreApp", b =>
                {
                    b.HasOne("BL.Entities.PartnerSpecific", "PartnerSpecific")
                        .WithMany("AssociatedStoreApps")
                        .HasForeignKey("PartnerSpecificId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_associated_store_apps_partner_specifics_partner_specific_id");

                    b.Navigation("PartnerSpecific");
                });

            modelBuilder.Entity("BL.Entities.Card", b =>
                {
                    b.HasOne("BL.Entities.Participant", "Participant")
                        .WithOne("Card")
                        .HasForeignKey("BL.Entities.Card", "ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_participants_participant_id");

                    b.HasOne("BL.Entities.Partner", "Partner")
                        .WithMany("Cards")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_partners_partner_id");

                    b.Navigation("Participant");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("BL.Entities.PartnerSpecific", b =>
                {
                    b.HasOne("BL.Entities.Partner", "Partner")
                        .WithOne("PartnerSpecific")
                        .HasForeignKey("BL.Entities.PartnerSpecific", "PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_partner_specifics_partners_partner_id");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("BL.Entities.Pass", b =>
                {
                    b.HasOne("BL.Entities.Card", "Card")
                        .WithOne("Pass")
                        .HasForeignKey("BL.Entities.Pass", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_passes_cards_card_id");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("DevicePass", b =>
                {
                    b.HasOne("BL.Entities.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_device_pass_devices_devices_id");

                    b.HasOne("BL.Entities.Pass", null)
                        .WithMany()
                        .HasForeignKey("PassesPassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_device_pass_passes_passes_pass_id");
                });

            modelBuilder.Entity("BL.Entities.Participant", b =>
                {
                    b.HasOne("BL.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("BL.Entities.Participant", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_participants_users_id");
                });

            modelBuilder.Entity("BL.Entities.Card", b =>
                {
                    b.Navigation("Pass")
                        .IsRequired();
                });

            modelBuilder.Entity("BL.Entities.Partner", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("PartnerSpecific");
                });

            modelBuilder.Entity("BL.Entities.PartnerSpecific", b =>
                {
                    b.Navigation("AssociatedStoreApps");
                });

            modelBuilder.Entity("BL.Entities.Participant", b =>
                {
                    b.Navigation("Card");
                });
#pragma warning restore 612, 618
        }
    }
}
